#!/bin/bash
# 10.04.2015
# v0.1

SCRIPT_HELP="
Copy module from directory.

Usage:
       {0} module_src [module_name] [module_type] [module_subdir]
       module_src: [local_path|url_to_gz]
       module_type: [module|theme|library]

Options:
       -f Remove exists module
       -y Assume yes

Examples:
       {0} /path/to/mymodule
       {0} http://update.mycompany.ru/modules/mymodule.tar.gz mymodule
       {0} http://update.mycompany.ru/libraries/mylibrary.tar.gz mylibrary library
       {0} http://update.mycompany.ru/themes/mytheme.tar.gz mytheme theme
       {0} http://update.mycompany.ru/features/myfeature.tar.gz myfeature module my_modules
"

. $( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/../lib/drupal-scripts-init

if [ $# = 0 ]; then
	usage
	exit 1
fi

check_drupal
check_drush

src_path="${1%/}"
module_name=${2:-""}
module_type=${3:-"module"}
module_subdir=${4:-""}

# # copy to subdir
# if [ -n "$module_subdir" ]; then
# 	if [ ! -d "$module_subdir" ]; then
# 		echo "$module_subdir not exists, creating"
# 		mkdir -p "$module_subdir"
# 	fi
# fi

is_local_dir=""

# local directory
if [ -d "$src_path" ]; then
	if [ ! -r "$src_path" ]; then
		echo >&2 "Source $src_path not exists or not readable"
		exit 1
	fi
	is_local_dir=1
	module_name="$(basename "$src_path")"
fi

src_url=""

# local tgz or tgz url
if [ "$(echo "$src_path" | grep -cE "(\.tgz|.tar\.gz)")" = 1 ]; then
	# remote file
	if [ "$(echo "$src_path" | grep -cE "https?://")" = 1 ]; then
		src_url="$src_path"
	# local file
	else
		if [ ! -e "$src_path" ]; then
			echo >&2 "Module archive not exists"
			exit 1
		fi
		src_url="file://$src_path"
	fi

	if [ -z "$module_name" ]; then
		echo >&2 "module_name (arg 2) required for tar.gz module install"
		exit 1
	fi
fi

declare -A module_paths
module_paths["module"]="modules"
module_paths["theme"]="themes"
module_paths["library"]="libraries"

dest_path="sites/all/${module_paths["$module_type"]}/$module_name"
if [ -n "$module_subdir" ]; then
	dest_path="sites/all/${module_paths["$module_type"]}/$module_subdir/$module_name"
fi

# module owerwrite
if [ -d "$dest_path" ]; then
	if [ -n "$SCRIPT_FORCE" ]; then
		if [ -n "$SCRIPT_ASSUME_YES" ]; then
			[ -n "$SCRIPT_VERBOSE" ] && echo force rm -r "$dest_path"
			rm -r "$dest_path"
		else
			read -p "Overwrite $dest_path (y/n)? " -n 1 -r
			echo ""
			if [[ ! $REPLY =~ ^[Yy]$ ]]; then
				echo "Aborting installation."
				exit 1
			fi
			[ -n "$SCRIPT_VERBOSE" ] && echo confirm rm -r "$dest_path"
			rm -r "$dest_path"
		fi
	else
		echo >&2 "Module $dest_path exists, aborting."
		exit 0
	fi
fi

# copy local directory
if [ -n "$is_local_dir" ]; then
	[ -n "$SCRIPT_VERBOSE" ] && echo cp -r "$src_path" "$dest_path"
	cp -r "$src_path" "$dest_path"
fi

# download with drush make
if [ -n "$src_url" ]; then
	makefile=$(mktemp)
	echo "Created temp file $makefile"
	cat > $makefile << EOL
core = 7.x
api = 2
projects[$module_name][type] = "$module_type"
projects[$module_name][subdir] = "$module_subdir"
projects[$module_name][download][type] = "file"
projects[$module_name][download][url] = "$src_url"
EOL

	drush make --no-core -y --verbose $makefile
fi

user=$(stat -c '%U' "$PWD")
chown -R $user:$user "$dest_path"
